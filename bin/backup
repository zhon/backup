#!/usr/bin/env ruby

source_root = File.expand_path(File.dirname(__FILE__) + "/..")
$LOAD_PATH.unshift("#{source_root}/lib")

require 'backup'

require 'thor'

require 'threadpool'

require 'io/console'
require 'timeout'

# Find the backup drive in /Volumes
# Check diff with Media to see if you can do a --delete
# Backup to 
#

class CLI < Thor
  #desc "backup", "from #{SOURCE_DIR_ROOT} to #{BACK_UP_ROOT}#{BACK_UP_EXT}"
  desc "backup", "TODO get backup stuff from Mapper"
  option 'dry-run', alias: '-d', type: :boolean, desc: "perform a trial run with no changes made"
  option :delete, desc: 'delete extraneous files from dest dirs'
  option :dest, desc: 'backup to this distination'
  def backup
    cb = Backup::CommandsBuilder.new(Backup::Mapper.new, options)

    tp = ThreadPool.new(2)
    commands = cb.to_procs

    index = 0
    cb.to_s.each_line do |line|
      puts "#{index+=1}) " + line
    end
    print 'Options (a/' +  (1..index).to_a.join('/') +  '/q): '
    option = 'a'
    begin
      Timeout::timeout(5) do
        option = STDIN.getch
      end
    rescue Timeout::Error
    end
    puts option
    case option
    when 'a'
      commands.map { |item| tp.push item }
    when 1.to_s..index.to_s
      tp.push commands[option.to_i-1]
    else
      exit 0
    end

    tp.process
    tp.finish
  end

  default_task :backup

end


CLI.start
